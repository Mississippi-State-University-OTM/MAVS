import tkinter as tk
from tkinter import ttk
import gui.Tooltip as tt
import os

class SuspensionTab():
    def __init__(self, masroot):
        self.tab = ttk.Frame(masroot)
        self.long_offset_label = ttk.Label(self.tab, text='Longitudinal Offset from CG (m)')
        self.long_offset_label.grid(column=0, row=0,sticky='w')
        self.long_offset_entry = tk.Entry(self.tab)
        self.long_offset_entry.grid(column=1, row=0,sticky='w')
        self.long_offset_entry.insert(0,"168")
        tt.Tooltip(self.long_offset_label,text=('Offset of axle from CG. Forward is positive. Negative is behind the CG. Front axle should have a positive offset, rear axle(s) a negative offset.'))
        tt.Tooltip(self.long_offset_entry,text=('Offset of axle from CG. Forward is positive. Negative is behind the CG. Front axle should have a positive offset, rear axle(s) a negative offset.'))
    
        self.track_width_label = ttk.Label(self.tab, text='Track Width (m)')
        self.track_width_label.grid(column=0, row=1,sticky='w')
        self.track_width_entry = tk.Entry(self.tab)
        self.track_width_entry.grid(column=1, row=1,sticky='w')
        self.track_width_entry.insert(0,"168")
        tt.Tooltip(self.track_width_label,text=('Growth simulation time step in hours'))
        tt.Tooltip(self.track_width_entry,text=('Growth simulation time step in hours'))
    
        self.spring_const_label = ttk.Label(self.tab, text='Spring Constant (N/m)')
        self.spring_const_label.grid(column=0, row=2, sticky='w')
        self.spring_const_entry = tk.Entry(self.tab)
        self.spring_const_entry.grid(column=1, row=2,sticky='w')
        self.spring_const_entry.insert(0,"168")
        tt.Tooltip(self.spring_const_label,text=('The recommended spring constant is about 90 times the sprung mass in kg.'))
        tt.Tooltip(self.spring_const_entry,text=('The recommended spring constant is about 90 times the sprung mass in kg.'))
    
        self.damp_const_label = ttk.Label(self.tab, text='Damping Constant (Ns/m)')
        self.damp_const_label.grid(column=0, row=3, sticky='w')
        self.damp_const_entry = tk.Entry(self.tab)
        self.damp_const_entry.grid(column=1, row=3,sticky='w')
        self.damp_const_entry.insert(0,"168")
        tt.Tooltip(self.damp_const_label,text=('The recommended damping constant is about 9.5 times the sprung mass in kg.'))
        tt.Tooltip(self.damp_const_entry,text=('The recommended damping constant is about 9.5 times the sprung mass in kg.'))
    
        self.spring_len_label = ttk.Label(self.tab, text='Spring Length (m)')
        self.spring_len_label.grid(column=0, row=4, sticky='w')
        self.spring_len_entry = tk.Entry(self.tab)
        self.spring_len_entry.grid(column=1, row=4,sticky='w')
        self.spring_len_entry.insert(0,"168")
        tt.Tooltip(self.spring_len_label,text=('Length of the connection from the axle to the chassis (m).'))
        tt.Tooltip(self.spring_len_entry,text=('Length of the connection from the axle to the chassis (m).'))
    
        self.steer_angle_label = ttk.Label(self.tab, text='Maximum Steer Angle (deg)')
        self.steer_angle_label.grid(column=0, row=5, sticky='w')
        self.steer_angle_entry = tk.Entry(self.tab)
        self.steer_angle_entry.grid(column=1, row=5,sticky='w')
        self.steer_angle_entry.insert(0,"168")
        tt.Tooltip(self.steer_angle_label,text=('Maximum turning angle of the steered tire, in degrees.'))
        tt.Tooltip(self.steer_angle_entry,text=('Maximum turning angle of the steered tire, in degrees.'))
    
        self.unsprung_label = ttk.Label(self.tab, text='Unsprung Mass (kg)')
        self.unsprung_label.grid(column=0, row=6, sticky='w')
        self.unsprung_entry = tk.Entry(self.tab)
        self.unsprung_entry.grid(column=1, row=6,sticky='w')
        self.unsprung_entry.insert(0,"168")
        tt.Tooltip(self.unsprung_label,text=('Mass of the overall suspension element (including tire) in kg.'))
        tt.Tooltip(self.unsprung_entry,text=('Mass of the overall suspension element (including tire) in kg.'))
    
        self.steered_var = tk.IntVar()
        self.steered_var.set(True)
        self.steered_checkbox = tk.Checkbutton(self.tab, text="Steered?", variable=self.steered_var)
        self.steered_checkbox.grid(column=1,row=7,sticky='w')
        tt.Tooltip(self.steered_checkbox,text=('Is this axle steered?'))
    
        self.powered_var = tk.IntVar()
        self.powered_var.set(True)
        self.powered_checkbox = tk.Checkbutton(self.tab, text="Powered?", variable=self.powered_var)
        self.powered_checkbox.grid(column=1,row=8,sticky='w')
        tt.Tooltip(self.powered_checkbox,text=('Is this axle powered?'))

class VisMeshTab():
    def __init__(self, masroot, mavs_data_path):
        self.tab = ttk.Frame(masroot)
        def locMeshCallBack():
           m_file = tk.filedialog.askopenfilename(initialdir = mavs_data_path+"/scenes/meshes/vehicles")
           self.m_file_entry.delete(0, tk.END)
           self.m_file_entry.insert(0,(os.path.basename(m_file)))
        self.file_label = ttk.Label(self.tab, text='Mesh File')
        self.file_label.grid(column=0, row=0,sticky='w')
        self.file_entry = tk.Entry(self.tab)
        self.file_entry.grid(column=1, row=0,sticky='w')
        self.file_entry.insert(0,"1kHM.png")
        self.file_select_button = tk.Button(self.tab, text ="Select Mesh File", command = locMeshCallBack)
        self.file_select_button.grid(row=0,column=2,columnspan=1,sticky='ew')
        tt.Tooltip(self.file_label,text=('Select the mesh file corresponding to the vehicle chassis.'))
        tt.Tooltip(self.file_entry,text=('Select the mesh file corresponding to the vehicle chassis.'))
        tt.Tooltip(self.file_select_button,text=('Select the mesh file corresponding to the vehicle chassis.'))
        
        self.offset_label = ttk.Label(self.tab, text='Mesh Offset')
        self.offset_label.grid(column=0, row=1,sticky='w')
        self.off_x_entry = tk.Entry(self.tab)
        self.off_x_entry.grid(column=1, row=1,sticky='w')
        self.off_x_entry.insert(0,"0.0")
        self.off_y_entry = tk.Entry(self.tab)
        self.off_y_entry.grid(column=2, row=1,sticky='w')
        self.off_y_entry.insert(0,"0.0")
        self.off_z_entry = tk.Entry(self.tab)
        self.off_z_entry.grid(column=3, row=1,sticky='w')
        self.off_z_entry.insert(0,"0.0")
        tt.Tooltip(self.offset_label,text=('Offset of the mesh in from the physics body.'))
        tt.Tooltip(self.off_x_entry,text=('Offset of the mesh in from the physics body (x-component).'))
        tt.Tooltip(self.off_y_entry,text=('Offset of the mesh in from the physics body (y-component).'))
        tt.Tooltip(self.off_z_entry,text=('Offset of the mesh in from the physics body (z-component).'))
        
        self.scale_label = ttk.Label(self.tab, text='Mesh Scale')
        self.scale_label.grid(column=0, row=2,sticky='w')
        self.scale_x_entry = tk.Entry(self.tab)
        self.scale_x_entry.grid(column=1, row=2,sticky='w')
        self.scale_x_entry.insert(0,"1.0")
        self.scale_y_entry = tk.Entry(self.tab)
        self.scale_y_entry.grid(column=2, row=2,sticky='w')
        self.scale_y_entry.insert(0,"1.0")
        self.scale_z_entry = tk.Entry(self.tab)
        self.scale_z_entry.grid(column=3, row=2,sticky='w')
        self.scale_z_entry.insert(0,"1.0")
        tt.Tooltip(self.scale_label,text=('Scale factor for the mesh visualization'))
        tt.Tooltip(self.scale_x_entry,text=('Scale factor for the mesh visualization (x-component)'))
        tt.Tooltip(self.scale_y_entry,text=('Scale factor for the mesh visualization (y-component)'))
        tt.Tooltip(self.scale_z_entry,text=('Scale factor for the mesh visualization (z-component)'))
        
        self.rot_y_to_z_var = tk.IntVar()
        self.rot_y_to_z_var.set(False)
        self.rot_y_to_z_checkbox = tk.Checkbutton(self.tab, text="Rotate Y to Z?", variable=self.rot_y_to_z_var)
        self.rot_y_to_z_checkbox.grid(column=1,row=3,sticky='w')
        tt.Tooltip(self.rot_y_to_z_checkbox,text=('Change the default orientation of the mesh.'))
        
        self.rot_x_to_y_var = tk.IntVar()
        self.rot_x_to_y_var.set(False)
        self.rot_x_to_y_checkbox = tk.Checkbutton(self.tab, text="Rotate X to Y?", variable=self.rot_x_to_y_var)
        self.rot_x_to_y_checkbox.grid(column=1,row=4,sticky='w')
        tt.Tooltip(self.rot_y_to_z_checkbox,text=('Change the default orientation of the mesh.'))
        
        self.rot_y_to_x_var = tk.IntVar()
        self.rot_y_to_x_var.set(False)
        self.rot_y_to_x_checkbox = tk.Checkbutton(self.tab, text="Rotate Y to X?", variable=self.rot_y_to_x_var)
        self.rot_y_to_x_checkbox.grid(column=1,row=4,sticky='w')
        tt.Tooltip(self.rot_y_to_x_checkbox,text=('Change the default orientation of the mesh.'))
    
class TireTab():
    def __init__(self, masroot):
        self.tab = ttk.Frame(masroot)
        self.spring_cons_label = ttk.Label(self.tab, text='Spring Constant (N/m)')
        self.spring_cons_label.grid(column=0, row=0,sticky='w')
        self.spring_cons_entry = tk.Entry(self.tab)
        self.spring_cons_entry.grid(column=1, row=0,sticky='w')
        self.spring_cons_entry.insert(0,"168")
        tt.Tooltip(self.spring_cons_label,text=('Spring constant of the tire, proportional to inflation pressure.'))
        tt.Tooltip(self.spring_cons_entry,text=('Spring constant of the tire, proportional to inflation pressure.'))
    
        self.damp_const_label = ttk.Label(self.tab, text='Damping Constant (Ns/m)')
        self.damp_const_label.grid(column=0, row=1, sticky='w')
        self.damp_const_entry = tk.Entry(self.tab)
        self.damp_const_entry.grid(column=1, row=1,sticky='w')
        self.damp_const_entry.insert(0,"168")
        tt.Tooltip(self.damp_const_label,text=('Tire damping constant, should be set to cricitcal damping.'))
        tt.Tooltip(self.damp_const_entry,text=('Tire damping constant, should be set to cricitcal damping.'))
    
        self.tire_rad_label = ttk.Label(self.tab, text='Tire Radius (m)')
        self.tire_rad_label.grid(column=0, row=2, sticky='w')
        self.tire_rad_entry = tk.Entry(self.tab)
        self.tire_rad_entry.grid(column=1, row=2,sticky='w')
        self.tire_rad_entry.insert(0,"168")
        tt.Tooltip(self.tire_rad_label,text=('Undeflected tire radius (m)'))
        tt.Tooltip(self.tire_rad_entry,text=('Undeflected tire radius (m)'))
    
        self.tire_wid_label = ttk.Label(self.tab, text='Tire Width (m)')
        self.tire_wid_label.grid(column=0, row=3, sticky='w')
        self.tire_wid_entry = tk.Entry(self.tab)
        self.tire_wid_entry.grid(column=1, row=3,sticky='w')
        self.tire_wid_entry.insert(0,"168")
        tt.Tooltip(self.tire_wid_label,text=('Undeflected tire section width (m)'))
        tt.Tooltip(self.tire_wid_entry,text=('Undeflected tire section width (m)'))
    
        self.tire_sh_label = ttk.Label(self.tab, text='Section Height (m)')
        self.tire_sh_label.grid(column=0, row=4, sticky='w')
        self.tire_sh_entry = tk.Entry(self.tab)
        self.tire_sh_entry.grid(column=1, row=4,sticky='w')
        self.tire_sh_entry.insert(0,"168")
        tt.Tooltip(self.tire_sh_label,text=('Undeflected tire section height (m)'))
        tt.Tooltip(self.tire_sh_entry,text=('Undeflected tire section height (m)'))
    
        self.hsca_label = ttk.Label(self.tab, text='High Slip Crossover Angle (deg)')
        self.hsca_label.grid(column=0, row=5, sticky='w')
        self.hsca_entry = tk.Entry(self.tab)
        self.hsca_entry.grid(column=1, row=5,sticky='w')
        self.hsca_entry.insert(0,"168")
        tt.Tooltip(self.hsca_label,text=('Slip angle (degree) at which the traction "crosses-over" to constant.'))
        tt.Tooltip(self.hsca_entry,text=('Slip angle (degree) at which the traction "crosses-over" to constant.'))
    
        self.vf_label = ttk.Label(self.tab, text='Viscous Friction Coefficient')
        self.vf_label.grid(column=0, row=5, sticky='w')
        self.vf_entry = tk.Entry(self.tab)
        self.vf_entry.grid(column=1, row=5,sticky='w')
        self.vf_entry.insert(0,"168")
        tt.Tooltip(self.vf_label,text=('Friction coefficient for how the "free-spinning" tire loses angular momentum.'))
        tt.Tooltip(self.vf_entry,text=('Friction coefficient for how the "free-spinning" tire loses angular momentum.'))
